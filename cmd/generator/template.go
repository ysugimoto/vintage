package main

const tmplVariables = `
// Code generated by generator/main.go; DO NOT EDIT.

package variable

import "github.com/ysugimoto/vintage/transformer/value"

// VariablesImpl is underlying variable implementation.
// All get/set/unset variables will raise an error of NotImplementedError,
// intend to check all variables must be implemented.
// So it means that all variables implementation must be extended this struct
type VariablesImpl struct {
}

func (v *VariablesImpl) Get(name string) (*value.Value, error) {
	switch (name) {
	{{- range .GetVariables}}
	case {{ toUpper . }}: return nil, ErrNotImplemented(name)
	{{- end}}
	}

	return nil, ErrNotFound(name)
}

func (v *VariablesImpl) Set(name string, value *value.Value) (*value.Value, error) {
	switch (name) {
	{{- range .SetVariables}}
	case {{ toUpper . }}: return nil, ErrNotImplemented(name)
	{{- end}}
	}

	return nil, ErrCannotSet(name)
}

func (v *VariablesImpl) Unset(name string) (*value.Value, error) {
	switch (name) {
	{{- range .UnsetVariables}}
	case {{ toUpper . }}: return nil, ErrNotImplemented(name)
	{{- end}}
	}

	return nil, ErrCannotUnset(name)
}
`

const tmplPredefinedMap = `
// Code generated by generator/main.go; DO NOT EDIT.

package variable

const (
	{{- range .Variables}}
	{{ toUpper . }} = "{{ . }}"
	{{- end }}
)

var Getable = []string{
	{{- range .GetVariables}}
	"{{ . }}",
	{{- end}}
}

var Setable = []string{
	{{- range .SetVariables}}
	"{{ . }}",
	{{- end}}
}

var Unsetable = []string{
	{{- range .UnsetVariables}}
	"{{ . }}",
	{{- end}}
}
`

const tmplBuiltinFunction = `
// Code generated by generator/main.go; DO NOT EDIT.

package core

import (
	"github.com/ysugimoto/vintage/transformer/value"
)

type Spec struct {
	Name string
	ReturnType value.VCLType
	Requires []value.VCLType
	Optionals []value.VCLType
	VariadicIndex int
}

var builtinFunctions = map[string]Spec {
	{{- range .Functions }}
	"{{ .Name }}": {
		Name: "{{ toVintageFunction .Name }}",
		ReturnType: {{ .ReturnType }},
		Requires: []value.VCLType{{"{"}}{{ range .RequiredArguments }}value.{{.}},{{end}}{{"}"}},
		Optionals: []value.VCLType{{"{"}}{{ range .OptionalArguments }}value.{{.}},{{end}}{{"}"}},
		VariadicIndex: {{ .VariadicArgumentStartsIndex }},
	},
	{{- end}}
}
`
