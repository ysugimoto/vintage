// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"math"
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Utf8_strpad_Name = "utf8.strpad"

var Utf8_strpad_ArgumentTypes = []value.Type{value.StringType, value.IntegerType, value.StringType}

func Utf8_strpad_Validate(args []value.Value) error {
	if len(args) != 3 {
		return errors.ArgumentNotEnough(Utf8_strpad_Name, 3, args)
	}
	for i := range args {
		if args[i].Type() != Utf8_strpad_ArgumentTypes[i] {
			return errors.TypeMismatch(Utf8_strpad_Name, i+1, Utf8_strpad_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of utf8.strpad
// Arguments may be:
// - STRING, INTEGER, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/strings/utf8-strpad/
func Utf8_strpad(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Utf8_strpad_Validate(args); err != nil {
		return value.Null, err
	}

	s := value.Unwrap[*value.String](args[0]).Value
	width := value.Unwrap[*value.Integer](args[1]).Value
	pad := value.Unwrap[*value.String](args[2]).Value

	w := int(math.Abs(float64(width)))
	if len(s) >= w {
		return &value.String{Value: s}, nil
	}

	p := []rune(strings.Repeat(pad, w-len(s)))
	if width < 0 {
		return &value.String{Value: s + string(p[0:w-len(s)])}, nil
	}
	return &value.String{Value: string(p[0:w-len(s)]) + s}, nil
}
