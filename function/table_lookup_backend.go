// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/ast"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Table_lookup_backend_Name = "table.lookup_backend"

var Table_lookup_backend_ArgumentTypes = []value.Type{value.IdentType, value.StringType, value.BackendType}

func Table_lookup_backend_Validate(args []value.Value) error {
	if len(args) != 3 {
		return errors.ArgumentNotEnough(Table_lookup_backend_Name, 3, args)
	}
	for i := range args {
		if args[i].Type() != Table_lookup_backend_ArgumentTypes[i] {
			return errors.TypeMismatch(Table_lookup_backend_Name, i+1, Table_lookup_backend_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of table.lookup_backend
// Arguments may be:
// - TABLE, STRING, BACKEND
// Reference: https://developer.fastly.com/reference/vcl/functions/table/table-lookup-backend/
func Table_lookup_backend(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Table_lookup_backend_Validate(args); err != nil {
		return value.Null, err
	}

	id := value.Unwrap[*value.Ident](args[0]).Value
	key := value.Unwrap[*value.String](args[1]).Value
	defaultBackend := value.Unwrap[*value.Backend](args[2]).Value

	table, ok := ctx.Tables[id]
	if !ok {
		return &value.Backend{Value: defaultBackend}, errors.New(Table_lookup_backend_Name,
			"table %d does not exist", id,
		)
	}
	if table.ValueType == nil || table.ValueType.Value != "BACKEND" {
		return &value.Backend{Value: defaultBackend}, errors.New(Table_lookup_backend_Name,
			"table %d value type is not BACKEND", id,
		)
	}

	for _, prop := range table.Properties {
		if prop.Key.Value == key {
			v, ok := prop.Value.(*ast.BackendDeclaration)
			if !ok {
				return &value.Backend{Value: defaultBackend}, errors.New(Table_lookup_backend_Name,
					"table %s value could not cast to BACKEND type", id,
				)
			}
			return &value.Backend{Value: v}, nil
		}
	}
	return &value.Backend{Value: defaultBackend}, nil
}
