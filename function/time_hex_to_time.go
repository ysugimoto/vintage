// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"strconv"
	"time"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Time_hex_to_time_Name = "time.hex_to_time"

var Time_hex_to_time_ArgumentTypes = []value.Type{value.IntegerType, value.StringType}

func Time_hex_to_time_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Time_hex_to_time_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Time_hex_to_time_ArgumentTypes[i] {
			return errors.TypeMismatch(Time_hex_to_time_Name, i+1, Time_hex_to_time_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of time.hex_to_time
// Arguments may be:
// - INTEGER, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/date-and-time/time-hex-to-time/
func Time_hex_to_time(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Time_hex_to_time_Validate(args); err != nil {
		return value.Null, err
	}

	divisor := value.Unwrap[*value.Integer](args[0]).Value
	dividend := value.Unwrap[*value.String](args[1]).Value

	if divisor == 0 {
		return &value.Time{Value: time.Time{}}, errors.New(Time_hex_to_time_Name, "Could not divide by zero")
	}

	ts, err := strconv.ParseInt(dividend, 16, 64)
	if err != nil {
		return &value.Time{Value: time.Time{}}, errors.New(
			Time_hex_to_time_Name, "Failed to decode hex string to inteter: %s", err,
		)
	}

	return &value.Time{
		Value: time.Unix(int64(ts/divisor), 0),
	}, nil
}
