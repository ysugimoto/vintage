// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"strconv"
	"strings"
	"time"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Std_time_Name = "std.time"

var Std_time_ArgumentTypes = []value.Type{value.StringType, value.TimeType}

func Std_time_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Std_time_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Std_time_ArgumentTypes[i] {
			return errors.TypeMismatch(Std_time_Name, i+1, Std_time_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

var Std_time_SupportFormats = []string{
	time.RFC1123,
	time.RFC822,
	time.RFC850,
	time.ANSIC,
	"2006-01-02 15:04:05", // ISO 8601 subset
}

// Fastly built-in function implementation of std.time
// Arguments may be:
// - STRING, TIME
// Reference: https://developer.fastly.com/reference/vcl/functions/date-and-time/std-time/
func Std_time(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Std_time_Validate(args); err != nil {
		return value.Null, err
	}

	s := value.Unwrap[*value.String](args[0]).Value
	fallback := value.Unwrap[*value.Time](args[1]).Value

	var t time.Time
	var err error
	for _, format := range Std_time_SupportFormats {
		t, err = time.Parse(format, s)
		if err == nil {
			return &value.Time{Value: t}, nil
		}
	}

	// If all formats are invalid, try to parse from unix epoch seconds
	ss := s
	if idx := strings.Index(s, "."); idx != -1 {
		ss = s[0:idx]
	}
	ts, err := strconv.ParseInt(ss, 10, 64)
	if err != nil {
		t = fallback.Add(0)
	} else {
		t = time.Unix(ts, 0)
	}

	if t.Unix() < 0 {
		return &value.Time{OutOfBounds: true}, nil
	}
	return &value.Time{Value: t}, nil
}
