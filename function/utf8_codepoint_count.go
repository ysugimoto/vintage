// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"unicode/utf8"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Utf8_codepoint_count_Name = "utf8.codepoint_count"

var Utf8_codepoint_count_ArgumentTypes = []value.Type{value.StringType}

func Utf8_codepoint_count_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Utf8_codepoint_count_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Utf8_codepoint_count_ArgumentTypes[i] {
			return errors.TypeMismatch(Utf8_codepoint_count_Name, i+1, Utf8_codepoint_count_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of utf8.codepoint_count
// Arguments may be:
// - STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/strings/utf8-codepoint-count/
func Utf8_codepoint_count(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Utf8_codepoint_count_Validate(args); err != nil {
		return value.Null, err
	}

	input := value.Unwrap[*value.String](args[0]).Value
	return &value.Integer{
		Value: int64(utf8.RuneCountInString(input)),
	}, nil
}
