// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"fmt"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Time_units_Name = "time.units"

var Time_units_ArgumentTypes = []value.Type{value.StringType, value.TimeType}

func Time_units_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Time_units_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Time_units_ArgumentTypes[i] {
			return errors.TypeMismatch(Time_units_Name, i+1, Time_units_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of time.units
// Arguments may be:
// - STRING, TIME
// Reference: https://developer.fastly.com/reference/vcl/functions/date-and-time/time-units/
func Time_units(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Time_units_Validate(args); err != nil {
		return value.Null, err
	}

	unit := value.Unwrap[*value.String](args[0]).Value
	t := value.Unwrap[*value.Time](args[1]).Value

	switch unit {
	case "s":
		return &value.String{
			Value: fmt.Sprintf("%ds", t.Unix()),
		}, nil
	case "ms":
		return &value.String{
			Value: fmt.Sprintf("%dms", t.UnixMilli()),
		}, nil
	case "us":
		return &value.String{
			Value: fmt.Sprintf("%dus", t.UnixMicro()),
		}, nil
	case "ns":
		return &value.String{
			Value: fmt.Sprintf("%dns", t.UnixNano()),
		}, nil
	default:
		ctx.FastlyError = &value.String{Value: "EINVAL"}
		return &value.String{IsNotSet: true}, errors.New(Time_units_Name,
			"Invalid unit string %s, allow either of s, ms, us and ns", unit,
		)
	}
}
