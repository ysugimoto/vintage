// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/ysugimoto/falco/interpreter/assign"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/function/shared"
	"github.com/ysugimoto/falco/interpreter/limitations"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Header_set_Name = "header.set"

var Header_set_ArgumentTypes = []value.Type{value.IdentType}

func Header_set_Validate(args []value.Value) error {
	if len(args) != 3 {
		return errors.ArgumentNotEnough(Header_set_Name, 3, args)
	}
	for i := 0; i < 1; i++ {
		if args[i].Type() != Header_set_ArgumentTypes[i] {
			return errors.TypeMismatch(Header_set_Name, i+1, Header_set_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

func header_set(h http.Header, name, value string) {
	if !strings.Contains(name, ":") {
		h.Set(name, value)
		return
	}
	spl := strings.SplitN(name, ":", 2)
	h.Add(spl[0], fmt.Sprintf("%s=%s", spl[1], value))
}

// Fastly built-in function implementation of header.set
// Arguments may be:
// - ID, STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/headers/header-set/
func Header_set(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Header_set_Validate(args); err != nil {
		return value.Null, err
	}

	where := value.Unwrap[*value.Ident](args[0])

	name := &value.String{}
	if err := assign.Assign(name, args[1]); err != nil {
		return value.Null, errors.New(Header_set_Name, err.Error())
	}

	// Invalid header and protected header are no effect
	if !shared.IsValidHeader(name.Value) {
		return value.Null, nil
	}
	if err := limitations.CheckProtectedHeader(name.Value); err != nil {
		return value.Null, nil
	}

	val := &value.String{}
	if err := assign.Assign(val, args[2]); err != nil {
		return value.Null, errors.New(Header_set_Name, err.Error())
	}

	switch where.Value {
	case "req":
		if ctx.Request != nil {
			header_set(ctx.Request.Header, name.Value, val.Value)
		}
	case "resp":
		if ctx.Response != nil {
			header_set(ctx.Response.Header, name.Value, val.Value)
		}
	case "obj":
		if ctx.Object != nil {
			header_set(ctx.Object.Header, name.Value, val.Value)
		}
	case "bereq":
		if ctx.BackendRequest != nil {
			header_set(ctx.BackendRequest.Header, name.Value, val.Value)
		}
	case "beresp":
		if ctx.BackendResponse != nil {
			header_set(ctx.BackendResponse.Header, name.Value, val.Value)
		}
	}

	return value.Null, nil
}
