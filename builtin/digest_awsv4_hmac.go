// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Digest_awsv4_hmac_Name = "digest.awsv4_hmac"

var Digest_awsv4_hmac_ArgumentTypes = []value.Type{value.StringType, value.StringType, value.StringType, value.StringType, value.StringType}

func Digest_awsv4_hmac_Validate(args []value.Value) error {
	if len(args) != 5 {
		return errors.ArgumentNotEnough(Digest_awsv4_hmac_Name, 5, args)
	}
	for i := range args {
		if args[i].Type() != Digest_awsv4_hmac_ArgumentTypes[i] {
			return errors.TypeMismatch(Digest_awsv4_hmac_Name, i+1, Digest_awsv4_hmac_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of digest.awsv4_hmac
// Arguments may be:
// - STRING, STRING, STRING, STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/cryptographic/digest-awsv4-hmac/
func Digest_awsv4_hmac(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Digest_awsv4_hmac_Validate(args); err != nil {
		return value.Null, err
	}

	key := value.Unwrap[*value.String](args[0])
	dateStamp := value.Unwrap[*value.String](args[1])
	region := value.Unwrap[*value.String](args[2])
	service := value.Unwrap[*value.String](args[3])
	stringToSign := value.Unwrap[*value.String](args[4])

	signature := []byte("AWS4" + key.Value)
	hashes := []string{dateStamp.Value, region.Value, service.Value, "aws4_request", stringToSign.Value}
	for i := range hashes {
		mac := hmac.New(sha256.New, signature)
		mac.Write([]byte(hashes[i]))
		signature = mac.Sum(nil)
	}

	return &value.String{
		Value: strings.ToLower(hex.EncodeToString(signature)),
	}, nil
}
