// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"sort"
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Accept_language_filter_basic_Name = "accept.language_filter_basic"

var Accept_language_filter_basic_ArgumentTypes = []value.Type{value.StringType, value.StringType, value.StringType, value.IntegerType}

func Accept_language_filter_basic_Validate(args []value.Value) error {
	if len(args) != 4 {
		return errors.ArgumentNotEnough(Accept_language_filter_basic_Name, 4, args)
	}
	for i := range args {
		if args[i].Type() != Accept_language_filter_basic_ArgumentTypes[i] {
			return errors.TypeMismatch(Accept_language_filter_basic_Name, i+1, Accept_language_filter_basic_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of accept.language_filter_basic
// Arguments may be:
// - STRING, STRING, STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/content-negotiation/accept-language-filter-basic/
func Accept_language_filter_basic(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Accept_language_filter_basic_Validate(args); err != nil {
		return value.Null, err
	}

	lookup := value.Unwrap[*value.String](args[0])
	defaultValue := value.Unwrap[*value.String](args[1])
	language := value.Unwrap[*value.String](args[2])
	nmatches := value.Unwrap[*value.Integer](args[3])

	var languages []string
	for _, v := range strings.Split(lookup.Value, ":") {
		languages = append(languages, v)
	}

	var matches []int
	for _, v := range strings.Split(language.Value, ",") {
		v = strings.TrimSpace(v)
		if idx := strings.Index(v, ";"); idx != -1 {
			v = v[0:idx]
		}
		for i := range languages {
			if languages[i] == v {
				matches = append(matches, i)
			}
		}
	}

	if len(matches) == 0 {
		return defaultValue, nil
	}

	if len(matches) > int(nmatches.Value) {
		matches = matches[0:int(nmatches.Value)]
	}
	sort.Ints(matches)
	ret := make([]string, len(matches))
	for i, m := range matches {
		ret[i] = languages[m]
	}

	return &value.String{Value: strings.Join(ret, ",")}, nil
}
