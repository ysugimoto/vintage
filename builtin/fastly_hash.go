// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"bytes"
	"crypto/rand"
	"crypto/sha256"
	"encoding/binary"
	"math/big"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Fastly_hash_Name = "fastly.hash"

var Fastly_hash_ArgumentTypes = []value.Type{value.StringType, value.IntegerType, value.IntegerType, value.IntegerType}

func Fastly_hash_Validate(args []value.Value) error {
	if len(args) != 4 {
		return errors.ArgumentNotEnough(Fastly_hash_Name, 4, args)
	}
	for i := range args {
		if args[i].Type() != Fastly_hash_ArgumentTypes[i] {
			return errors.TypeMismatch(Fastly_hash_Name, i+1, Fastly_hash_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of fastly.hash
// Arguments may be:
// - STRING, INTEGER, INTEGER, INTEGER
// Reference: https://developer.fastly.com/reference/vcl/functions/miscellaneous/fastly-hash/
func Fastly_hash(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Fastly_hash_Validate(args); err != nil {
		return value.Null, err
	}

	key := value.Unwrap[*value.String](args[0])
	seed := value.Unwrap[*value.Integer](args[1])
	from := value.Unwrap[*value.Integer](args[2])
	to := value.Unwrap[*value.Integer](args[3])

	// Note: fastly.hash internal algorithm is not public.
	// So we implement hashing function as our own way:
	// sha256 hash algorithm
	// concatnation with key string and seed, and get random int between from and to
	enc := sha256.Sum256([]byte(key.Value))
	sb := make([]byte, 64)
	n := binary.PutVarint(sb, seed.Value)
	hash := append(enc[:], sb[:n]...)
	v, err := rand.Int(bytes.NewReader(hash), big.NewInt(from.Value+to.Value))
	if err != nil {
		return value.Null, errors.New("fastly.hash", "Failed to generate random hash: %s", err)
	}

	return &value.Integer{
		Value: v.Int64() - from.Value,
	}, nil
}
