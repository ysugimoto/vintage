// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"crypto/md5"
	"encoding/base32"
	"encoding/base64"
	"time"

	"github.com/pquerna/otp"
	"github.com/pquerna/otp/totp"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Digest_time_hmac_md5_Name = "digest.time_hmac_md5"

var Digest_time_hmac_md5_ArgumentTypes = []value.Type{value.StringType, value.IntegerType, value.IntegerType}

func Digest_time_hmac_md5_Validate(args []value.Value) error {
	if len(args) != 3 {
		return errors.ArgumentNotEnough(Digest_time_hmac_md5_Name, 3, args)
	}
	for i := range args {
		if args[i].Type() != Digest_time_hmac_md5_ArgumentTypes[i] {
			return errors.TypeMismatch(Digest_time_hmac_md5_Name, i+1, Digest_time_hmac_md5_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of digest.time_hmac_md5
// Arguments may be:
// - STRING, INTEGER, INTEGER
// Reference: https://developer.fastly.com/reference/vcl/functions/cryptographic/digest-time-hmac-md5/
func Digest_time_hmac_md5(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Digest_time_hmac_md5_Validate(args); err != nil {
		return value.Null, err
	}

	secret := value.Unwrap[*value.String](args[0])
	interval := value.Unwrap[*value.Integer](args[1])
	offset := value.Unwrap[*value.Integer](args[2])
	return digest_time_hmac_md5(time.Now(), secret, interval, offset)
}

func digest_time_hmac_md5(baseTime time.Time, secret *value.String, interval, offset *value.Integer) (value.Value, error) {
	dec, err := base64.StdEncoding.DecodeString(secret.Value)
	if err != nil {
		return value.Null, errors.New("digest.time_hmac_md5", "Failed to base64 decode secret string")
	}

	var skew uint
	if offset.Value >= 0 {
		skew = uint(offset.Value)
	}

	key := base32.StdEncoding.EncodeToString(dec)
	pass, err := totp.GenerateCodeCustom(key, baseTime, totp.ValidateOpts{
		Period:    uint(interval.Value),
		Digits:    otp.DigitsSix,
		Algorithm: otp.AlgorithmMD5,
		Skew:      skew,
	})
	if err != nil {
		return value.Null, errors.New("digest.time_hmac_md5", "Failed to generate TOTP password")
	}

	enc := md5.Sum([]byte(pass))
	return &value.String{
		Value: base64.StdEncoding.EncodeToString(enc[:]),
	}, nil
}
