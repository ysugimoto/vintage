// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"encoding/hex"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/function/shared"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Crypto_encrypt_hex_Name = "crypto.encrypt_hex"

var Crypto_encrypt_hex_ArgumentTypes = []value.Type{value.IdentType, value.IdentType, value.IdentType, value.StringType, value.StringType, value.StringType}

func Crypto_encrypt_hex_Validate(args []value.Value) error {
	if len(args) != 6 {
		return errors.ArgumentNotEnough(Crypto_encrypt_hex_Name, 6, args)
	}
	for i := range args {
		if args[i].Type() != Crypto_encrypt_hex_ArgumentTypes[i] {
			return errors.TypeMismatch(Crypto_encrypt_hex_Name, i+1, Crypto_encrypt_hex_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of crypto.encrypt_hex
// Arguments may be:
// - ID, ID, ID, STRING, STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/cryptographic/crypto-encrypt-hex/
func Crypto_encrypt_hex(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Crypto_encrypt_hex_Validate(args); err != nil {
		return value.Null, err
	}

	cipherId := value.Unwrap[*value.Ident](args[0])
	mode := value.Unwrap[*value.Ident](args[1])
	padding := value.Unwrap[*value.Ident](args[2])
	key := value.Unwrap[*value.String](args[3])
	iv := value.Unwrap[*value.String](args[4])
	text := value.Unwrap[*value.String](args[5])

	buf, err := hex.DecodeString(text.Value)
	if err != nil {
		return value.Null, errors.New("Failed to decode hex string: %s", text.Value)
	}

	codec, err := shared.NewCryptoCodec(
		Crypto_encrypt_hex_Name,
		cipherId.Value, mode.Value, padding.Value,
	)
	if err != nil {
		return value.Null, err
	}

	encrypted, err := codec.Encrypt(key.Value, iv.Value, buf)
	if err != nil {
		return value.Null, err
	}

	return &value.String{
		Value: hex.EncodeToString(encrypted),
	}, nil
}
