// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/function/shared"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Math_is_normal_Name = "math.is_normal"

var Math_is_normal_ArgumentTypes = []value.Type{value.FloatType}

func Math_is_normal_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Math_is_normal_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Math_is_normal_ArgumentTypes[i] {
			return errors.TypeMismatch(Math_is_normal_Name, i+1, Math_is_normal_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of math.is_normal
// Arguments may be:
// - FLOAT
// Reference: https://developer.fastly.com/reference/vcl/functions/floating-point-classifications/math-is-normal/
func Math_is_normal(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Math_is_normal_Validate(args); err != nil {
		return value.Null, err
	}

	x := value.Unwrap[*value.Float](args[0])
	if x.IsNAN || x.IsNegativeInf || x.IsPositiveInf {
		return &value.Boolean{Value: true}, nil
	}
	return &value.Boolean{Value: !shared.IsSubnormalFloat64(x.Value)}, nil
}
