// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"fmt"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Cstr_escape_Name = "cstr_escape"

var Cstr_escape_ArgumentTypes = []value.Type{value.StringType}

func Cstr_escape_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Cstr_escape_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Cstr_escape_ArgumentTypes[i] {
			return errors.TypeMismatch(Cstr_escape_Name, i+1, Cstr_escape_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

var Cstr_escape_CharacterMap = map[byte][]byte{
	0x22: []byte("\""),
	0x5C: []byte("\\"),
	0x08: []byte("\\b"),
	0x09: []byte("\\t"),
	0x0A: []byte("\\n"),
	0x0B: []byte("\\v"),
	0x0D: []byte("\\r"),
}

// Fastly built-in function implementation of cstr_escape
// Arguments may be:
// - STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/strings/cstr-escape/
func Cstr_escape(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Cstr_escape_Validate(args); err != nil {
		return value.Null, err
	}

	str := value.Unwrap[*value.String](args[0])
	var escaped []byte
	for _, b := range []byte(str.Value) {
		if v, ok := Cstr_escape_CharacterMap[b]; ok {
			escaped = append(escaped, v...)
			continue
		}
		if b < 0x1F || 0x7F < b {
			escaped = append(escaped, []byte(fmt.Sprintf("\\x%x", b))...)
			continue
		}
		escaped = append(escaped, b)
	}

	return &value.String{
		Value: string(escaped),
	}, nil
}
