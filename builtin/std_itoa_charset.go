// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Std_itoa_charset_Name = "std.itoa_charset"

var Std_itoa_charset_ArgumentTypes = []value.Type{value.IntegerType, value.StringType}

func Std_itoa_charset_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Std_itoa_charset_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Std_itoa_charset_ArgumentTypes[i] {
			return errors.TypeMismatch(Std_itoa_charset_Name, i+1, Std_itoa_charset_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of std.itoa_charset
// Arguments may be:
// - INTEGER, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/strings/std-itoa-charset/
func Std_itoa_charset(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Std_itoa_charset_Validate(args); err != nil {
		return value.Null, err
	}

	input := value.Unwrap[*value.Integer](args[0]).Value
	charsets := []byte(value.Unwrap[*value.String](args[1]).Value)

	// ref: strconv.FormatInt implementation of general case
	base := int64(len(charsets))
	var encoded []byte
	for input >= base {
		v := input / base
		encoded = append(encoded, charsets[input-(v*base)])
		input = v
	}
	encoded = append(encoded, charsets[input])
	reversed := make([]byte, len(encoded))
	for i := 0; i < len(encoded); i++ {
		reversed[len(encoded)-1-i] = encoded[i]
	}

	return &value.String{Value: string(reversed)}, nil
}
