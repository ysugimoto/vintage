// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"math"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of math.atan2
// Arguments may be:
// - FLOAT, FLOAT
// Reference: https://developer.fastly.com/reference/vcl/functions/math-trig/math-atan2/
func Test_Math_atan2(t *testing.T) {
	tests := []struct {
		y      *value.Float
		x      *value.Float
		expect *value.Float
		err    *value.String
	}{
		{y: &value.Float{IsNAN: true}, x: &value.Float{Value: 1.0}, expect: &value.Float{IsNAN: true}, err: nil},
		{y: &value.Float{Value: 1.0}, x: &value.Float{IsNAN: true}, expect: &value.Float{IsNAN: true}, err: nil},

		{y: &value.Float{Value: 1.0}, x: &value.Float{IsNegativeInf: true}, expect: &value.Float{Value: math.Pi}, err: nil},
		{y: &value.Float{Value: -1.0}, x: &value.Float{IsNegativeInf: true}, expect: &value.Float{Value: math.Pi}, err: nil},
		{y: &value.Float{Value: 1.0}, x: &value.Float{IsPositiveInf: true}, expect: &value.Float{Value: 0}, err: nil},
		{y: &value.Float{Value: -1.0}, x: &value.Float{IsPositiveInf: true}, expect: &value.Float{Value: 0}, err: nil},

		{y: &value.Float{IsPositiveInf: true}, x: &value.Float{IsNegativeInf: true}, expect: &value.Float{Value: 3 * math.Pi / 4}, err: nil},
		{y: &value.Float{IsPositiveInf: true}, x: &value.Float{IsPositiveInf: true}, expect: &value.Float{Value: math.Pi / 4}, err: nil},
		{y: &value.Float{IsPositiveInf: true}, x: &value.Float{Value: 1.0}, expect: &value.Float{Value: math.Pi}, err: nil},
		{y: &value.Float{IsNegativeInf: true}, x: &value.Float{IsNegativeInf: true}, expect: &value.Float{Value: 3 * math.Pi / 4}, err: nil},
		{y: &value.Float{IsNegativeInf: true}, x: &value.Float{IsPositiveInf: true}, expect: &value.Float{Value: math.Pi / 4}, err: nil},
		{y: &value.Float{IsNegativeInf: true}, x: &value.Float{Value: 1.0}, expect: &value.Float{Value: math.Pi}, err: nil},

		{y: &value.Float{Value: 0}, x: &value.Float{Value: -1.0}, expect: &value.Float{Value: math.Pi}, err: nil},
		{y: &value.Float{Value: 0}, x: &value.Float{Value: 1.0}, expect: &value.Float{Value: 0}, err: nil},

		{y: &value.Float{Value: -1.0}, x: &value.Float{Value: 0}, expect: &value.Float{Value: -math.Pi / 2}, err: nil},
		{y: &value.Float{Value: 1.0}, x: &value.Float{Value: 0}, expect: &value.Float{Value: math.Pi / 2}, err: nil},

		{y: &value.Float{Value: 0}, x: &value.Float{Value: 0}, expect: &value.Float{Value: 0}, err: &value.String{Value: "EDOM"}},
		{y: &value.Float{Value: 1.0}, x: &value.Float{Value: 0.5}, expect: &value.Float{Value: 1.1071487177940904}, err: nil},
	}

	for i, tt := range tests {
		ret, err := Math_atan2(&context.Context{}, tt.y, tt.x)
		if err != nil {
			t.Errorf("[%d] Unexpected error: %s", i, err)
		}
		if ret.Type() != value.FloatType {
			t.Errorf("[%d] Unexpected return type, expect=FLOAT, got=%s", i, ret.Type())
		}
		v := value.Unwrap[*value.Float](ret)
		if diff := cmp.Diff(v, tt.expect); diff != "" {
			t.Errorf("[%d] Return value unmatch, diff: %s", i, diff)
		}
	}
}
