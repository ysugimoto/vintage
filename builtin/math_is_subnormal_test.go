// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"math"
	"math/rand"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of math.is_subnormal
// Arguments may be:
// - FLOAT
// Reference: https://developer.fastly.com/reference/vcl/functions/floating-point-classifications/math-is-subnormal/
func Test_Math_is_subnormal(t *testing.T) {
	subnormalValue := math.Float64frombits(0x0000000000000001 | (rand.Uint64() & 0x000fffffffffffff))
	tests := []struct {
		input  *value.Float
		expect *value.Boolean
		err    *value.String
	}{
		{input: &value.Float{IsNAN: true}, expect: &value.Boolean{Value: false}, err: nil},
		{input: &value.Float{IsNegativeInf: true}, expect: &value.Boolean{Value: false}, err: nil},
		{input: &value.Float{IsPositiveInf: true}, expect: &value.Boolean{Value: false}, err: nil},
		{input: &value.Float{Value: 1.2}, expect: &value.Boolean{Value: false}, err: nil},
		{input: &value.Float{Value: subnormalValue}, expect: &value.Boolean{Value: true}, err: nil},
	}

	for i, tt := range tests {
		ret, err := Math_is_subnormal(&context.Context{}, tt.input)
		if err != nil {
			t.Errorf("[%d] Unexpected error: %s", i, err)
		}
		if ret.Type() != value.BooleanType {
			t.Errorf("[%d] Unexpected return type, expect=BOOL, got=%s", i, ret.Type())
		}
		v := value.Unwrap[*value.Boolean](ret)
		if diff := cmp.Diff(v, tt.expect); diff != "" {
			t.Errorf("[%d] Return value unmatch, diff: %s", i, diff)
		}
	}
}
