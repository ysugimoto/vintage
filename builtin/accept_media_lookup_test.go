// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"testing"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of accept.media_lookup
// Arguments may be:
// - STRING, STRING, STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/content-negotiation/accept-media-lookup/
func Test_Accept_media_lookup(t *testing.T) {

	t.Run("third argument must be a literal", func(t *testing.T) {
		_, err := Accept_media_lookup(
			&context.Context{},
			&value.String{Value: "image/jpeg:image/png"},
			&value.String{Value: "text/plain"},
			&value.String{Value: "image/tiff:text/html"},
			&value.String{Value: "foobar"},
		)
		if err == nil {
			t.Errorf("error should be non-nil")
		}
	})

	t.Run("return value test", func(t *testing.T) {
		table := []struct {
			Accept string
			Expect string
		}{
			{
				Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
				Expect: "text/html",
			},
			{
				Accept: "application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
				Expect: "text/plain",
			},
			{
				Accept: "application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,image/*,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
				Expect: "image/tiff",
			},
		}

		for _, tt := range table {
			ret, err := Accept_media_lookup(
				&context.Context{},
				&value.String{Value: "image/jpeg:image/png"},
				&value.String{Value: "text/plain"},
				&value.String{Value: "image/tiff:text/html", Literal: true},
				&value.String{Value: tt.Accept},
			)
			if err != nil {
				t.Errorf("Unexpected error: %s", err)
			}
			if ret.Type() != value.StringType {
				t.Errorf("Unexpected type returned, expect=%s, got=%s", value.StringType, ret.Type())
			}
			v := value.Unwrap[*value.String](ret)
			if v.Value != tt.Expect {
				t.Errorf("Unexpected value returned, expect=%s, got=%s", tt.Expect, v.Value)
			}
		}
	})
}
