// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"fmt"
	"net/url"
	"sort"
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Boltsort_sort_Name = "boltsort.sort"

var Boltsort_sort_ArgumentTypes = []value.Type{value.StringType}

func Boltsort_sort_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Boltsort_sort_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Boltsort_sort_ArgumentTypes[i] {
			return errors.TypeMismatch(Boltsort_sort_Name, i+1, Boltsort_sort_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of boltsort.sort
// Arguments may be:
// - STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/query-string/boltsort-sort/
func Boltsort_sort(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Boltsort_sort_Validate(args); err != nil {
		return value.Null, err
	}

	input := value.Unwrap[*value.String](args[0])
	parsed, err := url.ParseRequestURI(input.Value)
	if err != nil {
		// ignoring error
		return &value.String{Value: input.Value}, nil
	}
	query := parsed.Query()
	var sorted []string
	for k := range query {
		sorted = append(sorted, k)
	}
	sort.Strings(sorted)

	// Build RawQuery by sorted order
	var rawQuery []string
	for i := range sorted {
		qs := query[sorted[i]]
		sort.Strings(qs)
		for j := range qs {
			rawQuery = append(rawQuery, fmt.Sprintf(
				"%s=%s",
				url.QueryEscape(sorted[i]), url.QueryEscape(qs[j]),
			))
		}
	}
	parsed.RawQuery = strings.Join(rawQuery, "&")

	return &value.String{Value: parsed.String()}, nil
}
