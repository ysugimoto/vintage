// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"encoding/base64"
	"encoding/hex"
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Bin_base64_to_hex_Name = "bin.base64_to_hex"

var Bin_base64_to_hex_ArgumentTypes = []value.Type{value.StringType}

func Bin_base64_to_hex_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Bin_base64_to_hex_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Bin_base64_to_hex_ArgumentTypes[i] {
			return errors.TypeMismatch(Bin_base64_to_hex_Name, i+1, Bin_base64_to_hex_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of bin.base64_to_hex
// Arguments may be:
// - STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/cryptographic/bin-base64-to-hex/
func Bin_base64_to_hex(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Bin_base64_to_hex_Validate(args); err != nil {
		return value.Null, err
	}

	input := value.Unwrap[*value.String](args[0])

	// If input value is empty, return empty string
	if input.Value == "" {
		return &value.String{Value: ""}, nil
	}

	dec, err := base64.StdEncoding.DecodeString(input.Value)
	if err != nil {
		// If the Base64-encoded string s is not valid Base64, then fastly.error will be set to EINVAL.
		ctx.FastlyError = &value.String{Value: "EINVAL"}
		return &value.String{Value: ""}, nil
	}

	return &value.String{
		Value: strings.ToUpper(hex.EncodeToString(dec)),
	}, nil
}
