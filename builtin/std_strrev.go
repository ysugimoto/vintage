// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Std_strrev_Name = "std.strrev"

var Std_strrev_ArgumentTypes = []value.Type{value.StringType}

func Std_strrev_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Std_strrev_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Std_strrev_ArgumentTypes[i] {
			return errors.TypeMismatch(Std_strrev_Name, i+1, Std_strrev_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of std.strrev
// Arguments may be:
// - STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/strings/std-strrev/
func Std_strrev(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Std_strrev_Validate(args); err != nil {
		return value.Null, err
	}

	s := value.Unwrap[*value.String](args[0]).Value
	// Note: Fastly does not consider multibyte. When string includes multibyte, return empty string
	// To check it, compare byte slice and rune slice length are same. It means strings are all byte representation
	if len([]byte(s)) != len([]rune(s)) {
		return &value.String{IsNotSet: true}, nil
	}
	b := []byte(s)
	for i := 0; i < len(b)/2; i++ {
		b[i], b[len(b)-i-1] = b[len(b)-i-1], b[i]
	}

	return &value.String{Value: string(b)}, nil
}
